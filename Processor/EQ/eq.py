#APPLIES 5 STEP EQ PROCESS TO THE FILE test_mono.wav GENERATED BY mic_test.py
#HERE, 3 PEAKING FILTERS ARE CHAINED WITH A HIGH PASS AND LOW PASS
#LOW SHELF, BAND PASS, AND HIGH SHELF FUNCTIONS ARE AVAILABLE BUT UNUSED

#A = 10^(DBGAIN/40) (Suggested value is 2)
#Q = Related to BW of Filter, suggested value is .707 for "sharp" changes or 1.1 for "rounded" changes

import numpy as np
from scipy.io import wavfile
from scipy import signal
import math

def lowpass(w0, Q):
	#LPF, modeled from:
	#H(s) = 1/(s^2 + s/Q + 1)

	COSW0 = math.cos(w0)
	alpha = math.sin(w0)/(2*Q)

	b0 = (1-COSW0)/2
	b1 = 1-COSW0
	b2 = b0
	a0 = 1 + alpha
	a1 = -2*COSW0
	a2 = 1 - alpha

	num = [b0, b1, b2]
	den = [a0, a1, a2]
	sos = signal.tf2sos(num, den)
	return sos

def highpass(w0, Q):
	#HPF, modeled from:
	#H(s) = (s^2) / ((s^2) + (s/Q) + 1)
	COSW0 = math.cos(w0)
	alpha = math.sin(w0)/(2*Q)

	b0 = (1+COSW0)/2
	b1 = -(1+COSW0)
	b2 = b0
	a0 = 1 + alpha
	a1 = -2*COSW0
	a2 = 1 - alpha

	num = [b0, b1, b2]
	den = [a0, a1, a2]
	sos = signal.tf2sos(num, den)
	return sos


def bandpass(w0, Q):
#WROTE THIS FUNCTION, LEFT IT UNUSED IN FINAL IMPLEMENTATION
	#BPF, modeled from:
	#H(s) = s / (s^2 + s/q + 1)
	COSW0 = math.cos(w0)
	alpha = math.sin(w0)/(2*Q)

	b0 = Q*alpha #= SINW0/2
	b1 = 0
	b2 = -b0
	a0 = a + alpha
	a1 = -2*COSW0
	a2 = 1 - alpha

	num = [b0, b1, b2]
	den = [a0, a1, a2]
	sos = signal.tf2sos(num, den)
	return sos


def peaking(w0, Q, A):
	#Peaking EQ, modeled from:
	#H(s) = (s^2 + s*A/Q + 1) / ( s^2 + s/(A*Q) + 1)
	COSW0 = math.cos(w0)
	alpha = math.sin(w0)/(2*Q)

	b0 = 1 + (alpha*A)
	b1 = -2*COSW0
	b2 = 1 - (alpha*A)
	a0 = 1 + (alpha/A)
	a1 = -2*COSW0
	a2 = 1 - (alpha/A)

	num = [b0, b1, b2]
	den = [a0, a1, a2]
	sos = signal.tf2sos(num, den)
	return sos


def lowShelf(w0, Q, A):
#WROTE AND TESTED THIS FUNCTION, LEFT IT UNUSED IN FINAL IMPLEMENTATION
	#Low Shelf, modeled from:
	#H(s) = A * ((s^2 + sqrt(A)*s/Q + A) / (A*(s^2) + sqrt(A)*s/Q + 1)
	COSW0 = math.cos(w0)
	alpha = math.sin(w0)/(2*Q)

	b0 = A*((A+1)-(A-1)*COSW0 + (2*math.sqrt(A)*alpha))
	b1 = 2*A*((A-1)-((A+1)*COSW0))
	b2 = A*((A+1)-(A-1)*COSW0 - (2*math.sqrt(A)*alpha))
	a0 = (A+1) + ((A-1)*COSW0) + (2*math.sqrt(A)*alpha)
	a1 = -2 * ((A-1) + ((A+1)*COSW0))
	a2 = (A+1) + ((A-1)*COSW0) - (2*math.sqrt(A)*alpha)

	num = [b0, b1, b2]
	den = [a0, a1, a2]
	sos = signal.tf2sos(num, den)
	return sos


def highShelf(w0, Q, A):
#WROTE AND TESTED THIS FUNCTION, LEFT IT UNUSED IN FINAL IMPLEMENTATION
	#High Shelf, modeled from:
	#H(s) = A * ((A*(s^2) + sqrt(A)*s/Q + 1) / ((s^2) + sqrt(A)*s/Q + A)
	COSW0 = math.cos(w0)
	alpha = math.sin(w0)/(2*Q)

	b0 = A*((A+1)+(A-1)*COSW0 + (2*math.sqrt(A)*alpha))
	b1 = 2*A*((A-1)+((A+1)*COSW0))
	b2 = A*((A+1)+(A-1)*COSW0 - (2*math.sqrt(A)*alpha))
	a0 = (A+1) - ((A-1)*COSW0) + (2*math.sqrt(A)*alpha)
	a1 = -2 * ((A-1) - ((A+1)*COSW0))
	a2 = (A+1) - ((A-1)*COSW0) - (2*math.sqrt(A)*alpha)

	num = [b0, b1, b2]
	den = [a0, a1, a2]
	sos = signal.tf2sos(num, den)
	return sos

def main():
	FS = 44100
	sampleRate, inputArray = wavfile.read("Testing_Files/test_mono.wav")
	
	#Accept input, create filters, apply filter
	print("LOW PASS FILTER SETTINGS")
	F0 = (int)(input("Center frequency in Hz: "))
	Q = (float)(input("Q factor: (Suggested value .707): "))
	W0 = 2*math.pi*(F0/FS)
	sos = lowpass(W0, Q)
	inputArray1 = signal.sosfilt(sos, inputArray)

	print("PEAKING FILTER 1 SETTINGS")
	F0 = (int)(input("Center frequency in Hz: "))
	Q = (float)(input("Q factor: (Suggested value .707): "))
	A = (int)(input("A factor (Must be an integer value, suggested value 2): "))
	W0 = 2*math.pi*(F0/FS)
	sos = peaking(W0, Q, A)
	inputArray2 = signal.sosfilt(sos, inputArray1)

	print("PEAKING FILTER 2 SETTINGS")
	F0 = (int)(input("Center frequency in Hz: "))
	Q = (float)(input("Q factor: (Suggested value .707): "))
	A = (int)(input("A factor (Must be an integer value, suggested value 2): "))
	W0 = 2*math.pi*(F0/FS)
	sos = peaking(W0, Q, A)
	inputArray3 = signal.sosfilt(sos, inputArray2)

	print("PEAKING FILTER 3 SETTINGS")
	F0 = (int)(input("Center frequency in Hz: "))
	Q = (float)(input("Q factor: (Suggested value .707): "))
	A = (int)(input("A factor (Must be an integer value, suggested value 2): "))
	W0 = 2*math.pi*(F0/FS)
	sos = peaking(W0, Q, A)
	inputArray4 = signal.sosfilt(sos, inputArray3)

	print("HIGH PASS FILTER SETTINGS")
	F0 = (int)(input("Center frequency in Hz: "))
	Q = (float)(input("Q factor: (Suggested value .707): "))
	W0 = 2*math.pi*(F0/FS)
	sos = highpass(W0, Q)
	outputArray = signal.sosfilt(sos, inputArray4)
	
	#Normalize Audio Data
	write_me = outputArray / max(abs(outputArray))
	wavfile.write("Testing_Files/eq_chain_processed_mono.wav", sampleRate, write_me)

if __name__ == '__main__':
	main()


